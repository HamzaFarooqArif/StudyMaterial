#include <iostream>
#include <math.h>
using namespace std;
int main()
{
  double a, b, c, d, v1, v2;
  /*
  As x = (-b/2/a) +- (sqrt(b*b - 4*a*c)/2/a)i
  */
  cout<<"\n\a For ax^2 + bx + c = 0";
  cout<<"\n Enter a b c :";
  cin>>a>>b>>c;
  
  d = b*b - 4*a*c;
  
  if(d < 0)
  {
    v1 = -b/2/a;
    v2 = sqrt(-d)/2/a;
  }
  else
  {
    v1 = -b + sqrt(d)/2/a;
    v2 = -b - sqrt(d)/2/a;
  }
  
  if(d < 0)
  {
    cout<<"\nx = {"<<v1<<"+ i "<<v2<<", "<<v1<<"-i "<<v2<<"}";
  }
  else
  {
    cout<<"\nx = {"<<v1<<", "<<v2<<"}";
  }
  return 0;
}

#include <iostream>
#include <math.h>
#include <string.h>
using namespace std;

int main()
{
  class CQuad
  {
    double a, b, c;
    char solution[100], equation[81];
    
    public: 
        void ReadFromKB()
        {
          cout<<"\n\a For ax^2 + bx + c = 0 Enter a b c:";
          cin>>a>>b>>c;
        }
        void Reset()
        {
          sprintf(equation, "%lgx^2 %+lgx %+lg = 0", a, b, c);
          
          double d, v1, v2;
          
          d = b*b - 4*a*c;
          
          if(d < 0)
          {
            v1 = -b/2/a;
            v2 = sqrt(-d)/2/a;
            
            sprintf(solution, "x = {%+lg+i%lg, %+lg-i%lg}", v1, v2, v1, v2);
          }
          else
          {
            v2 = sqrt(d)/2/a;
            sprintf(solution, "x = {%+lg,%+lg}", v1+v2, v1-v2);
          }
        }
        void PrintEquation()
        {
          cout<<equation;
        }
        void PrintSolution()
        {
          cout<<solution;
        }
        void setA(double a1)
        {
          a = a1;
          Reset();
        }
        void setB(double b1)
        {
          b = b1;
          Reset();
        }
        void setC(double c1)
        {
          c = c1;
          Reset();
        }
        void setABC(double a1, double b1, double c1)
        {
          a = a1;
          b = b1;
          c = c1;
          Reset();
        }
        double getA() const
        {
          return a;
        }
        double getB() const
        {
          return b;
        }
        double getC() const
        {
          return c;
        }
        char *getEquation() const
        {
          char *str = new char[81];
          strcpy(str, equation);
          return str;
        }
        char *getSolution() const
        {
          char *str = new char[100];
          strcpy(str, solution);
          return str;
        }
  };
  
  CQuad E1;
  /*for(double a1 = 1; a1 < 11; a1 += 0.5)
  {
    for(double b1 = -10; b1 < 10; b1 += 0.5)
    {
      for(double c1 = -5; c1 < 5; c1 += 0.2)
      {
        E1.setABC(a1, b1, c1);
        E1.PrintEquation();
        cout<<" ==>";
        E1.PrintSolution();
      }
    }
  }*/
  
  double a1 = 1;
  double b1 = 1;
  double c1 = 1;
  
  E1.setABC(a1, b1, c1);
  E1.PrintEquation();
  cout<<" ==>";
  E1.PrintSolution();
  
  return 0;
}




#include <iostream>
#include <string>
using namespace std;
class CDate{
/*private:*/
  int month, day, year;
  static int daysofMonth[12];
  static char strofmonth[12][4];
  static char stringofmonth[12][10];
public:
	CDate();
	CDate(int, int, int);
	/*~CDate(){}*/
	void setDay(int);
	void setMonth(int);
	void setYear(int);
  void print(int)const;
  void Readfromkb();
  void validate();
  bool isleapyear()const;
  void setDate(int, int, int);
};
int  CDate::daysofMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
char CDate::strofmonth[12][4] = {"JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"};
char CDate::stringofmonth[12][10] = {"JANUARY", "FEBRUARY", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUGUST", "SEPTEMBER", "OCTOBER", "NOVEMBER", "DECEMBER"};
CDate::CDate(){day = 14; month = 8; year = 1947; validate();}
CDate::CDate(int d, int m, int y){
  day = d, month = m; year = y; validate();
}

void CDate::Readfromkb(){
  do{cout<< "\n \a Enter a date as dd mm yyyy :";cin>> day>> month>> year;validate();}while(day == -1);
}
void CDate::validate(){if(month < 1 || month > 12) day = -1; else{if(isleapyear())daysofMonth[1] = 29; else daysofMonth[1] = 28;}
if(day < 1 || day > daysofMonth[month - 1]) day = -1;}
bool CDate::isleapyear()const{
  if(year % 4 ) return 0;else return 1;
}
void CDate::setDay(int d){day = d; validate();}
void CDate::setYear(int y){year = y; validate();}
void CDate::setMonth(int m){month = m; validate();}
void CDate::setDate(int d, int m, int y){
  day = d, month = m; year = y; validate();
}
void CDate::print(int opt = 0)const{
  if(opt == 2)cout<< stringofmonth[month - 1]<< " "<< day<< "," <<year <<"\n";
  else if(opt == 1)/*std::*/cout <<day << "-"<< strofmonth[month - 1]<< "-"<<year <<"\n";
  else cout<<day <<"/" <<month <<"/" <<year <<"\n";
}
int main()
{

  CDate date(14, 2, 2000);
  date.print(2);
  date.Readfromkb();
  date.print(2);
  date.print();
  date.print(1);
  date.setDay(14);
  date.print(2);
  date.setDay(90);
  date.print(0);
  date.setMonth(12);
  date.print();
  date.setMonth(90);
  date.print();
  date.setDate(14, 2, 2000);
  date.print(2);
  date.setDate(90, 20, 2000);
  date.print(2);
}

