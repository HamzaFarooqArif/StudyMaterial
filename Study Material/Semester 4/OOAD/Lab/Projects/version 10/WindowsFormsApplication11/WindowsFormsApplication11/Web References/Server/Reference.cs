//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace WindowsFormsApplication11.Server {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IService1", Namespace="http://tempuri.org/")]
    public partial class Service1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getimagelengthOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkimageOperationCompleted;
        
        private System.Threading.SendOrPostCallback setImageToEmptyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getChatImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback setChatToImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback addusertogroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUsersgroupContactsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SIsOfflineUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback SOfflineUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback SConnectwithuserOperationCompleted;
        
        private System.Threading.SendOrPostCallback SDeleteUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback SSuspendUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUsersContactsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SPassRegisteredUsersnameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SPassRegisteredUserspasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback SPassSuspendedUsersnameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SPassSuspendedUserspasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback SPassToBeRegisteredUsersnameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SPassToBeRegisteredUserspasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback SRegisterUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback SLoginUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback SPassUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataUsingDataContractOperationCompleted;
        
        private System.Threading.SendOrPostCallback SRegisterAdminOperationCompleted;
        
        private System.Threading.SendOrPostCallback SLoginAdminOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeactivateMyAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddToContactsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddToBlockedUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback setChatToTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback setChatToEmptyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getChatTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback isConnectedOperationCompleted;
        
        private System.Threading.SendOrPostCallback setConnectedOperationCompleted;
        
        private System.Threading.SendOrPostCallback setGroupChatTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback setGroupChatToEmptyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getGroupChatTextOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service1() {
            this.Url = global::WindowsFormsApplication11.Properties.Settings.Default.WindowsFormsApplication11_Server_Service1;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getimagelengthCompletedEventHandler getimagelengthCompleted;
        
        /// <remarks/>
        public event checkimageCompletedEventHandler checkimageCompleted;
        
        /// <remarks/>
        public event setImageToEmptyCompletedEventHandler setImageToEmptyCompleted;
        
        /// <remarks/>
        public event getChatImageCompletedEventHandler getChatImageCompleted;
        
        /// <remarks/>
        public event setChatToImageCompletedEventHandler setChatToImageCompleted;
        
        /// <remarks/>
        public event addusertogroupCompletedEventHandler addusertogroupCompleted;
        
        /// <remarks/>
        public event getUsersgroupContactsCompletedEventHandler getUsersgroupContactsCompleted;
        
        /// <remarks/>
        public event SIsOfflineUserCompletedEventHandler SIsOfflineUserCompleted;
        
        /// <remarks/>
        public event SOfflineUserCompletedEventHandler SOfflineUserCompleted;
        
        /// <remarks/>
        public event SConnectwithuserCompletedEventHandler SConnectwithuserCompleted;
        
        /// <remarks/>
        public event SDeleteUserCompletedEventHandler SDeleteUserCompleted;
        
        /// <remarks/>
        public event SSuspendUserCompletedEventHandler SSuspendUserCompleted;
        
        /// <remarks/>
        public event getUsersContactsCompletedEventHandler getUsersContactsCompleted;
        
        /// <remarks/>
        public event SPassRegisteredUsersnameCompletedEventHandler SPassRegisteredUsersnameCompleted;
        
        /// <remarks/>
        public event SPassRegisteredUserspasswordCompletedEventHandler SPassRegisteredUserspasswordCompleted;
        
        /// <remarks/>
        public event SPassSuspendedUsersnameCompletedEventHandler SPassSuspendedUsersnameCompleted;
        
        /// <remarks/>
        public event SPassSuspendedUserspasswordCompletedEventHandler SPassSuspendedUserspasswordCompleted;
        
        /// <remarks/>
        public event SPassToBeRegisteredUsersnameCompletedEventHandler SPassToBeRegisteredUsersnameCompleted;
        
        /// <remarks/>
        public event SPassToBeRegisteredUserspasswordCompletedEventHandler SPassToBeRegisteredUserspasswordCompleted;
        
        /// <remarks/>
        public event SRegisterUserCompletedEventHandler SRegisterUserCompleted;
        
        /// <remarks/>
        public event SLoginUserCompletedEventHandler SLoginUserCompleted;
        
        /// <remarks/>
        public event SPassUserCompletedEventHandler SPassUserCompleted;
        
        /// <remarks/>
        public event GetDataCompletedEventHandler GetDataCompleted;
        
        /// <remarks/>
        public event GetDataUsingDataContractCompletedEventHandler GetDataUsingDataContractCompleted;
        
        /// <remarks/>
        public event SRegisterAdminCompletedEventHandler SRegisterAdminCompleted;
        
        /// <remarks/>
        public event SLoginAdminCompletedEventHandler SLoginAdminCompleted;
        
        /// <remarks/>
        public event DeactivateMyAccountCompletedEventHandler DeactivateMyAccountCompleted;
        
        /// <remarks/>
        public event AddToContactsCompletedEventHandler AddToContactsCompleted;
        
        /// <remarks/>
        public event AddToBlockedUsersCompletedEventHandler AddToBlockedUsersCompleted;
        
        /// <remarks/>
        public event setChatToTextCompletedEventHandler setChatToTextCompleted;
        
        /// <remarks/>
        public event setChatToEmptyCompletedEventHandler setChatToEmptyCompleted;
        
        /// <remarks/>
        public event getChatTextCompletedEventHandler getChatTextCompleted;
        
        /// <remarks/>
        public event isConnectedCompletedEventHandler isConnectedCompleted;
        
        /// <remarks/>
        public event setConnectedCompletedEventHandler setConnectedCompleted;
        
        /// <remarks/>
        public event setGroupChatTextCompletedEventHandler setGroupChatTextCompleted;
        
        /// <remarks/>
        public event setGroupChatToEmptyCompletedEventHandler setGroupChatToEmptyCompleted;
        
        /// <remarks/>
        public event getGroupChatTextCompletedEventHandler getGroupChatTextCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getimagelength", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getimagelength([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string email, out int getimagelengthResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool getimagelengthResultSpecified) {
            object[] results = this.Invoke("getimagelength", new object[] {
                        email});
            getimagelengthResult = ((int)(results[0]));
            getimagelengthResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void getimagelengthAsync(string email) {
            this.getimagelengthAsync(email, null);
        }
        
        /// <remarks/>
        public void getimagelengthAsync(string email, object userState) {
            if ((this.getimagelengthOperationCompleted == null)) {
                this.getimagelengthOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetimagelengthOperationCompleted);
            }
            this.InvokeAsync("getimagelength", new object[] {
                        email}, this.getimagelengthOperationCompleted, userState);
        }
        
        private void OngetimagelengthOperationCompleted(object arg) {
            if ((this.getimagelengthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getimagelengthCompleted(this, new getimagelengthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/checkimage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void checkimage([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string email, out bool checkimageResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool checkimageResultSpecified) {
            object[] results = this.Invoke("checkimage", new object[] {
                        email});
            checkimageResult = ((bool)(results[0]));
            checkimageResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void checkimageAsync(string email) {
            this.checkimageAsync(email, null);
        }
        
        /// <remarks/>
        public void checkimageAsync(string email, object userState) {
            if ((this.checkimageOperationCompleted == null)) {
                this.checkimageOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckimageOperationCompleted);
            }
            this.InvokeAsync("checkimage", new object[] {
                        email}, this.checkimageOperationCompleted, userState);
        }
        
        private void OncheckimageOperationCompleted(object arg) {
            if ((this.checkimageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkimageCompleted(this, new checkimageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/setImageToEmpty", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setImageToEmpty([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Email) {
            this.Invoke("setImageToEmpty", new object[] {
                        Email});
        }
        
        /// <remarks/>
        public void setImageToEmptyAsync(string Email) {
            this.setImageToEmptyAsync(Email, null);
        }
        
        /// <remarks/>
        public void setImageToEmptyAsync(string Email, object userState) {
            if ((this.setImageToEmptyOperationCompleted == null)) {
                this.setImageToEmptyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetImageToEmptyOperationCompleted);
            }
            this.InvokeAsync("setImageToEmpty", new object[] {
                        Email}, this.setImageToEmptyOperationCompleted, userState);
        }
        
        private void OnsetImageToEmptyOperationCompleted(object arg) {
            if ((this.setImageToEmptyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setImageToEmptyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getChatImage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getChatImage([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Email, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] ref byte[] img) {
            object[] results = this.Invoke("getChatImage", new object[] {
                        Email,
                        img});
            img = ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getChatImageAsync(string Email, byte[] img) {
            this.getChatImageAsync(Email, img, null);
        }
        
        /// <remarks/>
        public void getChatImageAsync(string Email, byte[] img, object userState) {
            if ((this.getChatImageOperationCompleted == null)) {
                this.getChatImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetChatImageOperationCompleted);
            }
            this.InvokeAsync("getChatImage", new object[] {
                        Email,
                        img}, this.getChatImageOperationCompleted, userState);
        }
        
        private void OngetChatImageOperationCompleted(object arg) {
            if ((this.getChatImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getChatImageCompleted(this, new getChatImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/setChatToImage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setChatToImage([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Email, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] img, int length, [System.Xml.Serialization.XmlIgnoreAttribute()] bool lengthSpecified) {
            this.Invoke("setChatToImage", new object[] {
                        Email,
                        img,
                        length,
                        lengthSpecified});
        }
        
        /// <remarks/>
        public void setChatToImageAsync(string Email, byte[] img, int length, bool lengthSpecified) {
            this.setChatToImageAsync(Email, img, length, lengthSpecified, null);
        }
        
        /// <remarks/>
        public void setChatToImageAsync(string Email, byte[] img, int length, bool lengthSpecified, object userState) {
            if ((this.setChatToImageOperationCompleted == null)) {
                this.setChatToImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetChatToImageOperationCompleted);
            }
            this.InvokeAsync("setChatToImage", new object[] {
                        Email,
                        img,
                        length,
                        lengthSpecified}, this.setChatToImageOperationCompleted, userState);
        }
        
        private void OnsetChatToImageOperationCompleted(object arg) {
            if ((this.setChatToImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setChatToImageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/addusertogroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void addusertogroup([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string myemail, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string hisemail) {
            this.Invoke("addusertogroup", new object[] {
                        myemail,
                        hisemail});
        }
        
        /// <remarks/>
        public void addusertogroupAsync(string myemail, string hisemail) {
            this.addusertogroupAsync(myemail, hisemail, null);
        }
        
        /// <remarks/>
        public void addusertogroupAsync(string myemail, string hisemail, object userState) {
            if ((this.addusertogroupOperationCompleted == null)) {
                this.addusertogroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddusertogroupOperationCompleted);
            }
            this.InvokeAsync("addusertogroup", new object[] {
                        myemail,
                        hisemail}, this.addusertogroupOperationCompleted, userState);
        }
        
        private void OnaddusertogroupOperationCompleted(object arg) {
            if ((this.addusertogroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addusertogroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getUsersgroupContacts", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getUsersgroupContacts([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string email, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] ref string[] str) {
            object[] results = this.Invoke("getUsersgroupContacts", new object[] {
                        email,
                        str});
            str = ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getUsersgroupContactsAsync(string email, string[] str) {
            this.getUsersgroupContactsAsync(email, str, null);
        }
        
        /// <remarks/>
        public void getUsersgroupContactsAsync(string email, string[] str, object userState) {
            if ((this.getUsersgroupContactsOperationCompleted == null)) {
                this.getUsersgroupContactsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUsersgroupContactsOperationCompleted);
            }
            this.InvokeAsync("getUsersgroupContacts", new object[] {
                        email,
                        str}, this.getUsersgroupContactsOperationCompleted, userState);
        }
        
        private void OngetUsersgroupContactsOperationCompleted(object arg) {
            if ((this.getUsersgroupContactsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUsersgroupContactsCompleted(this, new getUsersgroupContactsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/SIsOfflineUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SIsOfflineUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string myemail, out bool SIsOfflineUserResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool SIsOfflineUserResultSpecified) {
            object[] results = this.Invoke("SIsOfflineUser", new object[] {
                        myemail});
            SIsOfflineUserResult = ((bool)(results[0]));
            SIsOfflineUserResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void SIsOfflineUserAsync(string myemail) {
            this.SIsOfflineUserAsync(myemail, null);
        }
        
        /// <remarks/>
        public void SIsOfflineUserAsync(string myemail, object userState) {
            if ((this.SIsOfflineUserOperationCompleted == null)) {
                this.SIsOfflineUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSIsOfflineUserOperationCompleted);
            }
            this.InvokeAsync("SIsOfflineUser", new object[] {
                        myemail}, this.SIsOfflineUserOperationCompleted, userState);
        }
        
        private void OnSIsOfflineUserOperationCompleted(object arg) {
            if ((this.SIsOfflineUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SIsOfflineUserCompleted(this, new SIsOfflineUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/SOfflineUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SOfflineUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string myemail) {
            this.Invoke("SOfflineUser", new object[] {
                        myemail});
        }
        
        /// <remarks/>
        public void SOfflineUserAsync(string myemail) {
            this.SOfflineUserAsync(myemail, null);
        }
        
        /// <remarks/>
        public void SOfflineUserAsync(string myemail, object userState) {
            if ((this.SOfflineUserOperationCompleted == null)) {
                this.SOfflineUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSOfflineUserOperationCompleted);
            }
            this.InvokeAsync("SOfflineUser", new object[] {
                        myemail}, this.SOfflineUserOperationCompleted, userState);
        }
        
        private void OnSOfflineUserOperationCompleted(object arg) {
            if ((this.SOfflineUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SOfflineUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/SConnectwithuser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SConnectwithuser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string myemail, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string hisemail, out bool SConnectwithuserResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool SConnectwithuserResultSpecified) {
            object[] results = this.Invoke("SConnectwithuser", new object[] {
                        myemail,
                        hisemail});
            SConnectwithuserResult = ((bool)(results[0]));
            SConnectwithuserResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void SConnectwithuserAsync(string myemail, string hisemail) {
            this.SConnectwithuserAsync(myemail, hisemail, null);
        }
        
        /// <remarks/>
        public void SConnectwithuserAsync(string myemail, string hisemail, object userState) {
            if ((this.SConnectwithuserOperationCompleted == null)) {
                this.SConnectwithuserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSConnectwithuserOperationCompleted);
            }
            this.InvokeAsync("SConnectwithuser", new object[] {
                        myemail,
                        hisemail}, this.SConnectwithuserOperationCompleted, userState);
        }
        
        private void OnSConnectwithuserOperationCompleted(object arg) {
            if ((this.SConnectwithuserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SConnectwithuserCompleted(this, new SConnectwithuserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/SDeleteUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SDeleteUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string email, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, out bool SDeleteUserResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool SDeleteUserResultSpecified) {
            object[] results = this.Invoke("SDeleteUser", new object[] {
                        email,
                        password});
            SDeleteUserResult = ((bool)(results[0]));
            SDeleteUserResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void SDeleteUserAsync(string email, string password) {
            this.SDeleteUserAsync(email, password, null);
        }
        
        /// <remarks/>
        public void SDeleteUserAsync(string email, string password, object userState) {
            if ((this.SDeleteUserOperationCompleted == null)) {
                this.SDeleteUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSDeleteUserOperationCompleted);
            }
            this.InvokeAsync("SDeleteUser", new object[] {
                        email,
                        password}, this.SDeleteUserOperationCompleted, userState);
        }
        
        private void OnSDeleteUserOperationCompleted(object arg) {
            if ((this.SDeleteUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SDeleteUserCompleted(this, new SDeleteUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/SSuspendUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SSuspendUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string email, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, out bool SSuspendUserResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool SSuspendUserResultSpecified) {
            object[] results = this.Invoke("SSuspendUser", new object[] {
                        email,
                        password});
            SSuspendUserResult = ((bool)(results[0]));
            SSuspendUserResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void SSuspendUserAsync(string email, string password) {
            this.SSuspendUserAsync(email, password, null);
        }
        
        /// <remarks/>
        public void SSuspendUserAsync(string email, string password, object userState) {
            if ((this.SSuspendUserOperationCompleted == null)) {
                this.SSuspendUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSSuspendUserOperationCompleted);
            }
            this.InvokeAsync("SSuspendUser", new object[] {
                        email,
                        password}, this.SSuspendUserOperationCompleted, userState);
        }
        
        private void OnSSuspendUserOperationCompleted(object arg) {
            if ((this.SSuspendUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SSuspendUserCompleted(this, new SSuspendUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getUsersContacts", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getUsersContacts([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string email, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] ref string[] str) {
            object[] results = this.Invoke("getUsersContacts", new object[] {
                        email,
                        str});
            str = ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getUsersContactsAsync(string email, string[] str) {
            this.getUsersContactsAsync(email, str, null);
        }
        
        /// <remarks/>
        public void getUsersContactsAsync(string email, string[] str, object userState) {
            if ((this.getUsersContactsOperationCompleted == null)) {
                this.getUsersContactsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUsersContactsOperationCompleted);
            }
            this.InvokeAsync("getUsersContacts", new object[] {
                        email,
                        str}, this.getUsersContactsOperationCompleted, userState);
        }
        
        private void OngetUsersContactsOperationCompleted(object arg) {
            if ((this.getUsersContactsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUsersContactsCompleted(this, new getUsersContactsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/SPassRegisteredUsersname", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SPassRegisteredUsersname([System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] ref string[] str) {
            object[] results = this.Invoke("SPassRegisteredUsersname", new object[] {
                        str});
            str = ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void SPassRegisteredUsersnameAsync(string[] str) {
            this.SPassRegisteredUsersnameAsync(str, null);
        }
        
        /// <remarks/>
        public void SPassRegisteredUsersnameAsync(string[] str, object userState) {
            if ((this.SPassRegisteredUsersnameOperationCompleted == null)) {
                this.SPassRegisteredUsersnameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSPassRegisteredUsersnameOperationCompleted);
            }
            this.InvokeAsync("SPassRegisteredUsersname", new object[] {
                        str}, this.SPassRegisteredUsersnameOperationCompleted, userState);
        }
        
        private void OnSPassRegisteredUsersnameOperationCompleted(object arg) {
            if ((this.SPassRegisteredUsersnameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SPassRegisteredUsersnameCompleted(this, new SPassRegisteredUsersnameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/SPassRegisteredUserspassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SPassRegisteredUserspassword([System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] ref string[] str) {
            object[] results = this.Invoke("SPassRegisteredUserspassword", new object[] {
                        str});
            str = ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void SPassRegisteredUserspasswordAsync(string[] str) {
            this.SPassRegisteredUserspasswordAsync(str, null);
        }
        
        /// <remarks/>
        public void SPassRegisteredUserspasswordAsync(string[] str, object userState) {
            if ((this.SPassRegisteredUserspasswordOperationCompleted == null)) {
                this.SPassRegisteredUserspasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSPassRegisteredUserspasswordOperationCompleted);
            }
            this.InvokeAsync("SPassRegisteredUserspassword", new object[] {
                        str}, this.SPassRegisteredUserspasswordOperationCompleted, userState);
        }
        
        private void OnSPassRegisteredUserspasswordOperationCompleted(object arg) {
            if ((this.SPassRegisteredUserspasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SPassRegisteredUserspasswordCompleted(this, new SPassRegisteredUserspasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/SPassSuspendedUsersname", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SPassSuspendedUsersname([System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] ref string[] str) {
            object[] results = this.Invoke("SPassSuspendedUsersname", new object[] {
                        str});
            str = ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void SPassSuspendedUsersnameAsync(string[] str) {
            this.SPassSuspendedUsersnameAsync(str, null);
        }
        
        /// <remarks/>
        public void SPassSuspendedUsersnameAsync(string[] str, object userState) {
            if ((this.SPassSuspendedUsersnameOperationCompleted == null)) {
                this.SPassSuspendedUsersnameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSPassSuspendedUsersnameOperationCompleted);
            }
            this.InvokeAsync("SPassSuspendedUsersname", new object[] {
                        str}, this.SPassSuspendedUsersnameOperationCompleted, userState);
        }
        
        private void OnSPassSuspendedUsersnameOperationCompleted(object arg) {
            if ((this.SPassSuspendedUsersnameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SPassSuspendedUsersnameCompleted(this, new SPassSuspendedUsersnameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/SPassSuspendedUserspassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SPassSuspendedUserspassword([System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] ref string[] str) {
            object[] results = this.Invoke("SPassSuspendedUserspassword", new object[] {
                        str});
            str = ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void SPassSuspendedUserspasswordAsync(string[] str) {
            this.SPassSuspendedUserspasswordAsync(str, null);
        }
        
        /// <remarks/>
        public void SPassSuspendedUserspasswordAsync(string[] str, object userState) {
            if ((this.SPassSuspendedUserspasswordOperationCompleted == null)) {
                this.SPassSuspendedUserspasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSPassSuspendedUserspasswordOperationCompleted);
            }
            this.InvokeAsync("SPassSuspendedUserspassword", new object[] {
                        str}, this.SPassSuspendedUserspasswordOperationCompleted, userState);
        }
        
        private void OnSPassSuspendedUserspasswordOperationCompleted(object arg) {
            if ((this.SPassSuspendedUserspasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SPassSuspendedUserspasswordCompleted(this, new SPassSuspendedUserspasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/SPassToBeRegisteredUsersname", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SPassToBeRegisteredUsersname([System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] ref string[] str) {
            object[] results = this.Invoke("SPassToBeRegisteredUsersname", new object[] {
                        str});
            str = ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void SPassToBeRegisteredUsersnameAsync(string[] str) {
            this.SPassToBeRegisteredUsersnameAsync(str, null);
        }
        
        /// <remarks/>
        public void SPassToBeRegisteredUsersnameAsync(string[] str, object userState) {
            if ((this.SPassToBeRegisteredUsersnameOperationCompleted == null)) {
                this.SPassToBeRegisteredUsersnameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSPassToBeRegisteredUsersnameOperationCompleted);
            }
            this.InvokeAsync("SPassToBeRegisteredUsersname", new object[] {
                        str}, this.SPassToBeRegisteredUsersnameOperationCompleted, userState);
        }
        
        private void OnSPassToBeRegisteredUsersnameOperationCompleted(object arg) {
            if ((this.SPassToBeRegisteredUsersnameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SPassToBeRegisteredUsersnameCompleted(this, new SPassToBeRegisteredUsersnameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/SPassToBeRegisteredUserspassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SPassToBeRegisteredUserspassword([System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] ref string[] str) {
            object[] results = this.Invoke("SPassToBeRegisteredUserspassword", new object[] {
                        str});
            str = ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void SPassToBeRegisteredUserspasswordAsync(string[] str) {
            this.SPassToBeRegisteredUserspasswordAsync(str, null);
        }
        
        /// <remarks/>
        public void SPassToBeRegisteredUserspasswordAsync(string[] str, object userState) {
            if ((this.SPassToBeRegisteredUserspasswordOperationCompleted == null)) {
                this.SPassToBeRegisteredUserspasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSPassToBeRegisteredUserspasswordOperationCompleted);
            }
            this.InvokeAsync("SPassToBeRegisteredUserspassword", new object[] {
                        str}, this.SPassToBeRegisteredUserspasswordOperationCompleted, userState);
        }
        
        private void OnSPassToBeRegisteredUserspasswordOperationCompleted(object arg) {
            if ((this.SPassToBeRegisteredUserspasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SPassToBeRegisteredUserspasswordCompleted(this, new SPassToBeRegisteredUserspasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/SRegisterUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SRegisterUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string firstname, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string lastname, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string email, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string contact, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string cnic, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string secretq, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ans, out bool SRegisterUserResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool SRegisterUserResultSpecified) {
            object[] results = this.Invoke("SRegisterUser", new object[] {
                        firstname,
                        lastname,
                        password,
                        email,
                        contact,
                        cnic,
                        secretq,
                        ans});
            SRegisterUserResult = ((bool)(results[0]));
            SRegisterUserResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void SRegisterUserAsync(string firstname, string lastname, string password, string email, string contact, string cnic, string secretq, string ans) {
            this.SRegisterUserAsync(firstname, lastname, password, email, contact, cnic, secretq, ans, null);
        }
        
        /// <remarks/>
        public void SRegisterUserAsync(string firstname, string lastname, string password, string email, string contact, string cnic, string secretq, string ans, object userState) {
            if ((this.SRegisterUserOperationCompleted == null)) {
                this.SRegisterUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSRegisterUserOperationCompleted);
            }
            this.InvokeAsync("SRegisterUser", new object[] {
                        firstname,
                        lastname,
                        password,
                        email,
                        contact,
                        cnic,
                        secretq,
                        ans}, this.SRegisterUserOperationCompleted, userState);
        }
        
        private void OnSRegisterUserOperationCompleted(object arg) {
            if ((this.SRegisterUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SRegisterUserCompleted(this, new SRegisterUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/SLoginUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SLoginUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string email, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, out bool SLoginUserResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool SLoginUserResultSpecified) {
            object[] results = this.Invoke("SLoginUser", new object[] {
                        email,
                        password});
            SLoginUserResult = ((bool)(results[0]));
            SLoginUserResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void SLoginUserAsync(string email, string password) {
            this.SLoginUserAsync(email, password, null);
        }
        
        /// <remarks/>
        public void SLoginUserAsync(string email, string password, object userState) {
            if ((this.SLoginUserOperationCompleted == null)) {
                this.SLoginUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSLoginUserOperationCompleted);
            }
            this.InvokeAsync("SLoginUser", new object[] {
                        email,
                        password}, this.SLoginUserOperationCompleted, userState);
        }
        
        private void OnSLoginUserOperationCompleted(object arg) {
            if ((this.SLoginUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SLoginUserCompleted(this, new SLoginUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/SPassUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SPassUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string email, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, out bool SPassUserResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool SPassUserResultSpecified) {
            object[] results = this.Invoke("SPassUser", new object[] {
                        email,
                        password});
            SPassUserResult = ((bool)(results[0]));
            SPassUserResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void SPassUserAsync(string email, string password) {
            this.SPassUserAsync(email, password, null);
        }
        
        /// <remarks/>
        public void SPassUserAsync(string email, string password, object userState) {
            if ((this.SPassUserOperationCompleted == null)) {
                this.SPassUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSPassUserOperationCompleted);
            }
            this.InvokeAsync("SPassUser", new object[] {
                        email,
                        password}, this.SPassUserOperationCompleted, userState);
        }
        
        private void OnSPassUserOperationCompleted(object arg) {
            if ((this.SPassUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SPassUserCompleted(this, new SPassUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/GetData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetData(int value, [System.Xml.Serialization.XmlIgnoreAttribute()] bool valueSpecified) {
            object[] results = this.Invoke("GetData", new object[] {
                        value,
                        valueSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataAsync(int value, bool valueSpecified) {
            this.GetDataAsync(value, valueSpecified, null);
        }
        
        /// <remarks/>
        public void GetDataAsync(int value, bool valueSpecified, object userState) {
            if ((this.GetDataOperationCompleted == null)) {
                this.GetDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataOperationCompleted);
            }
            this.InvokeAsync("GetData", new object[] {
                        value,
                        valueSpecified}, this.GetDataOperationCompleted, userState);
        }
        
        private void OnGetDataOperationCompleted(object arg) {
            if ((this.GetDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataCompleted(this, new GetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/GetDataUsingDataContract", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public CompositeType GetDataUsingDataContract([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CompositeType composite) {
            object[] results = this.Invoke("GetDataUsingDataContract", new object[] {
                        composite});
            return ((CompositeType)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataUsingDataContractAsync(CompositeType composite) {
            this.GetDataUsingDataContractAsync(composite, null);
        }
        
        /// <remarks/>
        public void GetDataUsingDataContractAsync(CompositeType composite, object userState) {
            if ((this.GetDataUsingDataContractOperationCompleted == null)) {
                this.GetDataUsingDataContractOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataUsingDataContractOperationCompleted);
            }
            this.InvokeAsync("GetDataUsingDataContract", new object[] {
                        composite}, this.GetDataUsingDataContractOperationCompleted, userState);
        }
        
        private void OnGetDataUsingDataContractOperationCompleted(object arg) {
            if ((this.GetDataUsingDataContractCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataUsingDataContractCompleted(this, new GetDataUsingDataContractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/SRegisterAdmin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SRegisterAdmin([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserFirstName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserLastName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Email, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CNIC, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Contact, out bool SRegisterAdminResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool SRegisterAdminResultSpecified) {
            object[] results = this.Invoke("SRegisterAdmin", new object[] {
                        UserFirstName,
                        UserLastName,
                        Password,
                        Email,
                        CNIC,
                        Contact});
            SRegisterAdminResult = ((bool)(results[0]));
            SRegisterAdminResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void SRegisterAdminAsync(string UserFirstName, string UserLastName, string Password, string Email, string CNIC, string Contact) {
            this.SRegisterAdminAsync(UserFirstName, UserLastName, Password, Email, CNIC, Contact, null);
        }
        
        /// <remarks/>
        public void SRegisterAdminAsync(string UserFirstName, string UserLastName, string Password, string Email, string CNIC, string Contact, object userState) {
            if ((this.SRegisterAdminOperationCompleted == null)) {
                this.SRegisterAdminOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSRegisterAdminOperationCompleted);
            }
            this.InvokeAsync("SRegisterAdmin", new object[] {
                        UserFirstName,
                        UserLastName,
                        Password,
                        Email,
                        CNIC,
                        Contact}, this.SRegisterAdminOperationCompleted, userState);
        }
        
        private void OnSRegisterAdminOperationCompleted(object arg) {
            if ((this.SRegisterAdminCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SRegisterAdminCompleted(this, new SRegisterAdminCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/SLoginAdmin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SLoginAdmin([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Email, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Password, out bool SLoginAdminResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool SLoginAdminResultSpecified) {
            object[] results = this.Invoke("SLoginAdmin", new object[] {
                        Email,
                        Password});
            SLoginAdminResult = ((bool)(results[0]));
            SLoginAdminResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void SLoginAdminAsync(string Email, string Password) {
            this.SLoginAdminAsync(Email, Password, null);
        }
        
        /// <remarks/>
        public void SLoginAdminAsync(string Email, string Password, object userState) {
            if ((this.SLoginAdminOperationCompleted == null)) {
                this.SLoginAdminOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSLoginAdminOperationCompleted);
            }
            this.InvokeAsync("SLoginAdmin", new object[] {
                        Email,
                        Password}, this.SLoginAdminOperationCompleted, userState);
        }
        
        private void OnSLoginAdminOperationCompleted(object arg) {
            if ((this.SLoginAdminCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SLoginAdminCompleted(this, new SLoginAdminCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/DeactivateMyAccount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeactivateMyAccount([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string email, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, out bool DeactivateMyAccountResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool DeactivateMyAccountResultSpecified) {
            object[] results = this.Invoke("DeactivateMyAccount", new object[] {
                        email,
                        password});
            DeactivateMyAccountResult = ((bool)(results[0]));
            DeactivateMyAccountResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void DeactivateMyAccountAsync(string email, string password) {
            this.DeactivateMyAccountAsync(email, password, null);
        }
        
        /// <remarks/>
        public void DeactivateMyAccountAsync(string email, string password, object userState) {
            if ((this.DeactivateMyAccountOperationCompleted == null)) {
                this.DeactivateMyAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeactivateMyAccountOperationCompleted);
            }
            this.InvokeAsync("DeactivateMyAccount", new object[] {
                        email,
                        password}, this.DeactivateMyAccountOperationCompleted, userState);
        }
        
        private void OnDeactivateMyAccountOperationCompleted(object arg) {
            if ((this.DeactivateMyAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeactivateMyAccountCompleted(this, new DeactivateMyAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/AddToContacts", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddToContacts([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string myEmail, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string myPassword, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string hisEmail, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string hisPassword) {
            this.Invoke("AddToContacts", new object[] {
                        myEmail,
                        myPassword,
                        hisEmail,
                        hisPassword});
        }
        
        /// <remarks/>
        public void AddToContactsAsync(string myEmail, string myPassword, string hisEmail, string hisPassword) {
            this.AddToContactsAsync(myEmail, myPassword, hisEmail, hisPassword, null);
        }
        
        /// <remarks/>
        public void AddToContactsAsync(string myEmail, string myPassword, string hisEmail, string hisPassword, object userState) {
            if ((this.AddToContactsOperationCompleted == null)) {
                this.AddToContactsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddToContactsOperationCompleted);
            }
            this.InvokeAsync("AddToContacts", new object[] {
                        myEmail,
                        myPassword,
                        hisEmail,
                        hisPassword}, this.AddToContactsOperationCompleted, userState);
        }
        
        private void OnAddToContactsOperationCompleted(object arg) {
            if ((this.AddToContactsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddToContactsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/AddToBlockedUsers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddToBlockedUsers([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string myEmail, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string hisEmail) {
            this.Invoke("AddToBlockedUsers", new object[] {
                        myEmail,
                        hisEmail});
        }
        
        /// <remarks/>
        public void AddToBlockedUsersAsync(string myEmail, string hisEmail) {
            this.AddToBlockedUsersAsync(myEmail, hisEmail, null);
        }
        
        /// <remarks/>
        public void AddToBlockedUsersAsync(string myEmail, string hisEmail, object userState) {
            if ((this.AddToBlockedUsersOperationCompleted == null)) {
                this.AddToBlockedUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddToBlockedUsersOperationCompleted);
            }
            this.InvokeAsync("AddToBlockedUsers", new object[] {
                        myEmail,
                        hisEmail}, this.AddToBlockedUsersOperationCompleted, userState);
        }
        
        private void OnAddToBlockedUsersOperationCompleted(object arg) {
            if ((this.AddToBlockedUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddToBlockedUsersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/setChatToText", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setChatToText([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Email, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string msg) {
            this.Invoke("setChatToText", new object[] {
                        Email,
                        msg});
        }
        
        /// <remarks/>
        public void setChatToTextAsync(string Email, string msg) {
            this.setChatToTextAsync(Email, msg, null);
        }
        
        /// <remarks/>
        public void setChatToTextAsync(string Email, string msg, object userState) {
            if ((this.setChatToTextOperationCompleted == null)) {
                this.setChatToTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetChatToTextOperationCompleted);
            }
            this.InvokeAsync("setChatToText", new object[] {
                        Email,
                        msg}, this.setChatToTextOperationCompleted, userState);
        }
        
        private void OnsetChatToTextOperationCompleted(object arg) {
            if ((this.setChatToTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setChatToTextCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/setChatToEmpty", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setChatToEmpty([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Email) {
            this.Invoke("setChatToEmpty", new object[] {
                        Email});
        }
        
        /// <remarks/>
        public void setChatToEmptyAsync(string Email) {
            this.setChatToEmptyAsync(Email, null);
        }
        
        /// <remarks/>
        public void setChatToEmptyAsync(string Email, object userState) {
            if ((this.setChatToEmptyOperationCompleted == null)) {
                this.setChatToEmptyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetChatToEmptyOperationCompleted);
            }
            this.InvokeAsync("setChatToEmpty", new object[] {
                        Email}, this.setChatToEmptyOperationCompleted, userState);
        }
        
        private void OnsetChatToEmptyOperationCompleted(object arg) {
            if ((this.setChatToEmptyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setChatToEmptyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getChatText", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getChatText([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Email, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string msg) {
            object[] results = this.Invoke("getChatText", new object[] {
                        Email,
                        msg});
            msg = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getChatTextAsync(string Email, string msg) {
            this.getChatTextAsync(Email, msg, null);
        }
        
        /// <remarks/>
        public void getChatTextAsync(string Email, string msg, object userState) {
            if ((this.getChatTextOperationCompleted == null)) {
                this.getChatTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetChatTextOperationCompleted);
            }
            this.InvokeAsync("getChatText", new object[] {
                        Email,
                        msg}, this.getChatTextOperationCompleted, userState);
        }
        
        private void OngetChatTextOperationCompleted(object arg) {
            if ((this.getChatTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getChatTextCompleted(this, new getChatTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/isConnected", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void isConnected([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Email, ref bool connected, [System.Xml.Serialization.XmlIgnoreAttribute()] ref bool connectedSpecified) {
            object[] results = this.Invoke("isConnected", new object[] {
                        Email,
                        connected,
                        connectedSpecified});
            connected = ((bool)(results[0]));
            connectedSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void isConnectedAsync(string Email, bool connected, bool connectedSpecified) {
            this.isConnectedAsync(Email, connected, connectedSpecified, null);
        }
        
        /// <remarks/>
        public void isConnectedAsync(string Email, bool connected, bool connectedSpecified, object userState) {
            if ((this.isConnectedOperationCompleted == null)) {
                this.isConnectedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisConnectedOperationCompleted);
            }
            this.InvokeAsync("isConnected", new object[] {
                        Email,
                        connected,
                        connectedSpecified}, this.isConnectedOperationCompleted, userState);
        }
        
        private void OnisConnectedOperationCompleted(object arg) {
            if ((this.isConnectedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isConnectedCompleted(this, new isConnectedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/setConnected", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setConnected([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Email, bool connected, [System.Xml.Serialization.XmlIgnoreAttribute()] bool connectedSpecified) {
            this.Invoke("setConnected", new object[] {
                        Email,
                        connected,
                        connectedSpecified});
        }
        
        /// <remarks/>
        public void setConnectedAsync(string Email, bool connected, bool connectedSpecified) {
            this.setConnectedAsync(Email, connected, connectedSpecified, null);
        }
        
        /// <remarks/>
        public void setConnectedAsync(string Email, bool connected, bool connectedSpecified, object userState) {
            if ((this.setConnectedOperationCompleted == null)) {
                this.setConnectedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetConnectedOperationCompleted);
            }
            this.InvokeAsync("setConnected", new object[] {
                        Email,
                        connected,
                        connectedSpecified}, this.setConnectedOperationCompleted, userState);
        }
        
        private void OnsetConnectedOperationCompleted(object arg) {
            if ((this.setConnectedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setConnectedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/setGroupChatText", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setGroupChatText([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Email, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string msg) {
            this.Invoke("setGroupChatText", new object[] {
                        Email,
                        msg});
        }
        
        /// <remarks/>
        public void setGroupChatTextAsync(string Email, string msg) {
            this.setGroupChatTextAsync(Email, msg, null);
        }
        
        /// <remarks/>
        public void setGroupChatTextAsync(string Email, string msg, object userState) {
            if ((this.setGroupChatTextOperationCompleted == null)) {
                this.setGroupChatTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetGroupChatTextOperationCompleted);
            }
            this.InvokeAsync("setGroupChatText", new object[] {
                        Email,
                        msg}, this.setGroupChatTextOperationCompleted, userState);
        }
        
        private void OnsetGroupChatTextOperationCompleted(object arg) {
            if ((this.setGroupChatTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setGroupChatTextCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/setGroupChatToEmpty", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setGroupChatToEmpty([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Email) {
            this.Invoke("setGroupChatToEmpty", new object[] {
                        Email});
        }
        
        /// <remarks/>
        public void setGroupChatToEmptyAsync(string Email) {
            this.setGroupChatToEmptyAsync(Email, null);
        }
        
        /// <remarks/>
        public void setGroupChatToEmptyAsync(string Email, object userState) {
            if ((this.setGroupChatToEmptyOperationCompleted == null)) {
                this.setGroupChatToEmptyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetGroupChatToEmptyOperationCompleted);
            }
            this.InvokeAsync("setGroupChatToEmpty", new object[] {
                        Email}, this.setGroupChatToEmptyOperationCompleted, userState);
        }
        
        private void OnsetGroupChatToEmptyOperationCompleted(object arg) {
            if ((this.setGroupChatToEmptyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setGroupChatToEmptyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getGroupChatText", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getGroupChatText([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Email, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] ref string[] str) {
            object[] results = this.Invoke("getGroupChatText", new object[] {
                        Email,
                        str});
            str = ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getGroupChatTextAsync(string Email, string[] str) {
            this.getGroupChatTextAsync(Email, str, null);
        }
        
        /// <remarks/>
        public void getGroupChatTextAsync(string Email, string[] str, object userState) {
            if ((this.getGroupChatTextOperationCompleted == null)) {
                this.getGroupChatTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetGroupChatTextOperationCompleted);
            }
            this.InvokeAsync("getGroupChatText", new object[] {
                        Email,
                        str}, this.getGroupChatTextOperationCompleted, userState);
        }
        
        private void OngetGroupChatTextOperationCompleted(object arg) {
            if ((this.getGroupChatTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getGroupChatTextCompleted(this, new getGroupChatTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/OrSunao")]
    public partial class CompositeType {
        
        private bool boolValueField;
        
        private bool boolValueFieldSpecified;
        
        private string stringValueField;
        
        /// <remarks/>
        public bool BoolValue {
            get {
                return this.boolValueField;
            }
            set {
                this.boolValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BoolValueSpecified {
            get {
                return this.boolValueFieldSpecified;
            }
            set {
                this.boolValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string StringValue {
            get {
                return this.stringValueField;
            }
            set {
                this.stringValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void getimagelengthCompletedEventHandler(object sender, getimagelengthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getimagelengthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getimagelengthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int getimagelengthResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool getimagelengthResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void checkimageCompletedEventHandler(object sender, checkimageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkimageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkimageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool checkimageResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool checkimageResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void setImageToEmptyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void getChatImageCompletedEventHandler(object sender, getChatImageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getChatImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getChatImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] img {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void setChatToImageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void addusertogroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void getUsersgroupContactsCompletedEventHandler(object sender, getUsersgroupContactsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUsersgroupContactsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUsersgroupContactsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] str {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SIsOfflineUserCompletedEventHandler(object sender, SIsOfflineUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SIsOfflineUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SIsOfflineUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool SIsOfflineUserResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool SIsOfflineUserResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SOfflineUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SConnectwithuserCompletedEventHandler(object sender, SConnectwithuserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SConnectwithuserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SConnectwithuserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool SConnectwithuserResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool SConnectwithuserResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SDeleteUserCompletedEventHandler(object sender, SDeleteUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SDeleteUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SDeleteUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool SDeleteUserResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool SDeleteUserResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SSuspendUserCompletedEventHandler(object sender, SSuspendUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SSuspendUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SSuspendUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool SSuspendUserResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool SSuspendUserResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void getUsersContactsCompletedEventHandler(object sender, getUsersContactsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUsersContactsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUsersContactsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] str {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SPassRegisteredUsersnameCompletedEventHandler(object sender, SPassRegisteredUsersnameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SPassRegisteredUsersnameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SPassRegisteredUsersnameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] str {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SPassRegisteredUserspasswordCompletedEventHandler(object sender, SPassRegisteredUserspasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SPassRegisteredUserspasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SPassRegisteredUserspasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] str {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SPassSuspendedUsersnameCompletedEventHandler(object sender, SPassSuspendedUsersnameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SPassSuspendedUsersnameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SPassSuspendedUsersnameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] str {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SPassSuspendedUserspasswordCompletedEventHandler(object sender, SPassSuspendedUserspasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SPassSuspendedUserspasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SPassSuspendedUserspasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] str {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SPassToBeRegisteredUsersnameCompletedEventHandler(object sender, SPassToBeRegisteredUsersnameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SPassToBeRegisteredUsersnameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SPassToBeRegisteredUsersnameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] str {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SPassToBeRegisteredUserspasswordCompletedEventHandler(object sender, SPassToBeRegisteredUserspasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SPassToBeRegisteredUserspasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SPassToBeRegisteredUserspasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] str {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SRegisterUserCompletedEventHandler(object sender, SRegisterUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SRegisterUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SRegisterUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool SRegisterUserResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool SRegisterUserResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SLoginUserCompletedEventHandler(object sender, SLoginUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SLoginUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SLoginUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool SLoginUserResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool SLoginUserResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SPassUserCompletedEventHandler(object sender, SPassUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SPassUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SPassUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool SPassUserResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool SPassUserResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetDataCompletedEventHandler(object sender, GetDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetDataUsingDataContractCompletedEventHandler(object sender, GetDataUsingDataContractCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataUsingDataContractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataUsingDataContractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CompositeType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CompositeType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SRegisterAdminCompletedEventHandler(object sender, SRegisterAdminCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SRegisterAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SRegisterAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool SRegisterAdminResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool SRegisterAdminResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SLoginAdminCompletedEventHandler(object sender, SLoginAdminCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SLoginAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SLoginAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool SLoginAdminResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool SLoginAdminResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void DeactivateMyAccountCompletedEventHandler(object sender, DeactivateMyAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeactivateMyAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeactivateMyAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool DeactivateMyAccountResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool DeactivateMyAccountResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void AddToContactsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void AddToBlockedUsersCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void setChatToTextCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void setChatToEmptyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void getChatTextCompletedEventHandler(object sender, getChatTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getChatTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getChatTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string msg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void isConnectedCompletedEventHandler(object sender, isConnectedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isConnectedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isConnectedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool connected {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool connectedSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void setConnectedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void setGroupChatTextCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void setGroupChatToEmptyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void getGroupChatTextCompletedEventHandler(object sender, getGroupChatTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getGroupChatTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getGroupChatTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] str {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591